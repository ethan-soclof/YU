Assignment MergeAnInterval [SoclofEthan]: 7/10

take #2

much better, restored one point

take #1

Pulled files on Thu Nov 12 10:18:38 EST 2020
Latest commit of student files ....
Grade for assignment [SoclofEthan]: /10
Pulled files on Thu Nov 12 10:30:16 EST 2020
Latest commit of student files ....
Latest commit of src/main/java/edu/yu/introtoalgs/MergeAnInterval.java was on: Mon Nov 9 22:45:39 2020

Deducting for basic correctness and performance failures.



Note: my test suite included 3 types of tests.  (1) performance tests to
determine whether your implementation produced O(n log n) (or better), (2)
correctness tests to determine whether you implemented the required semantics
and (3) "do you write good-quality code" with respect to dealing with invalid
input.  I weight (3) very lightly because software engineering is not the focus
of this course.

The assignment was primarily about (1) because this course is about
"Introduction to Algorithms".  I only put (2) in the test suite because there
is no point in getting good performance that's incorrect, so even if IMHO these
skills belong in Data Structures, I need to validate your work with respect to
this dimension as well.  However: if you failed the tests in (2), you WILL
AUTOMATICALLY FAIL THE PERFORMANCE TESTS as well because they assert that your
code is behaving correctly.  I have no way to test performance independently of
correctness, and therefore gave you a grade that reflects "did poorly on the
assignment".

The performance tests were based on the Sedgewick "doubling ratio" concepts
that we've discussed in lecture.  Because of possible non-algorithm vagaries
(also discussed in lecture), and because linearithmic is hard to pin down, I
erred on the side of generosity and allowed a "fudge factor" of "ok if ratio is
<= 3.3" for the "n disjoint intervals.  I used a "fudge factor" of "ok if ratio
is <= 3.5" for the "n NON-disjoint intervals" test.  I "shuffled" the input to
ensure a naive iteration through the input wouldn't produce the correct output.



building Student SoclofEthan assignment code base from directory /Users/avraham/YUGitRepos/2545/SoclofEthan/IntroToAlgorithms/assignments/MergeAnInterval
Picked up JAVA_TOOL_OPTIONS: -Xms4096m -Xmx15G -XX:MaxMetaspaceSize=1G
Copying Professor's JUnit source files in /Users/avraham/YUTeaching/IntroToAlgorithms/assignments/MergeAnInterval/src/test to Student SoclofEthan directory tree in /Users/avraham/YUGitRepos/2545/SoclofEthan/IntroToAlgorithms/assignments/MergeAnInterval/src
executing Professor's test code against Student SoclofEthan code
Picked up JAVA_TOOL_OPTIONS: -Xms4096m -Xmx15G -XX:MaxMetaspaceSize=1G
[ERROR] Picked up JAVA_TOOL_OPTIONS: -Xms4096m -Xmx15G -XX:MaxMetaspaceSize=1G
Test cases to execute : 1
Execution Started : vanillaTest
[INFO ] 2020-11-12 10:30:20.566 [main] ProfessorMergeAnIntervalTest vanillaTest - merging edu.yu.introtoalgs.MergeAnInterval$Interval@4ddbbdf8 into [edu.yu.introtoalgs.MergeAnInterval$Interval@3148f668, edu.yu.introtoalgs.MergeAnInterval$Interval@3561c410, edu.yu.introtoalgs.MergeAnInterval$Interval@6e005dc9, edu.yu.introtoalgs.MergeAnInterval$Interval@3081f72c, edu.yu.introtoalgs.MergeAnInterval$Interval@7ceb3185, edu.yu.introtoalgs.MergeAnInterval$Interval@436c81a3]
[INFO ] 2020-11-12 10:30:20.574 [main] ProfessorMergeAnIntervalTest vanillaTest - result of merge: [edu.yu.introtoalgs.MergeAnInterval$Interval@3561c410, edu.yu.introtoalgs.MergeAnInterval$Interval@3081f72c, edu.yu.introtoalgs.MergeAnInterval$Interval@43b9fd5, edu.yu.introtoalgs.MergeAnInterval$Interval@436c81a3]
Execution Failure : java.lang.AssertionError: 
Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@3081f72c>, <edu.yu.introtoalgs.MergeAnInterval$Interval@436c81a3>, <edu.yu.introtoalgs.MergeAnInterval$Interval@3561c410>, <edu.yu.introtoalgs.MergeAnInterval$Interval@5a3bc7ed>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@43b9fd5>
Execution Finished : vanillaTest
Execution Started : okForRightToOnlyBeGreaterThanLeftByOne
Execution Finished : okForRightToOnlyBeGreaterThanLeftByOne
Execution Started : overlappingIntervalsAreMerged
[INFO ] 2020-11-12 10:30:20.582 [main] ProfessorMergeAnIntervalTest overlappingIntervalsAreMerged - merging edu.yu.introtoalgs.MergeAnInterval$Interval@6d167f58 into [edu.yu.introtoalgs.MergeAnInterval$Interval@4ff8d125]
[INFO ] 2020-11-12 10:30:20.582 [main] ProfessorMergeAnIntervalTest overlappingIntervalsAreMerged - result of merge: [edu.yu.introtoalgs.MergeAnInterval$Interval@65b104b9]
Execution Failure : java.lang.AssertionError: 
Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@327bcebd>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@65b104b9>
Execution Finished : overlappingIntervalsAreMerged
Execution Started : performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput
[DEBUG] 2020-11-12 10:30:20.643 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=4096) = 3.0 (current = 3.0, previous = 1.0)
[DEBUG] 2020-11-12 10:30:20.659 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=8192) = 1.3333333333333333 (current = 4.0, previous = 3.0)
[DEBUG] 2020-11-12 10:30:20.705 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=16384) = 2.25 (current = 9.0, previous = 4.0)
[DEBUG] 2020-11-12 10:30:20.852 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=32768) = 1.5555555555555556 (current = 14.0, previous = 9.0)
[DEBUG] 2020-11-12 10:30:21.373 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=65536) = 1.5714285714285714 (current = 22.0, previous = 14.0)
[DEBUG] 2020-11-12 10:30:23.371 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=131072) = 2.272727272727273 (current = 50.0, previous = 22.0)
[DEBUG] 2020-11-12 10:30:31.177 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=262144) = 1.84 (current = 92.0, previous = 50.0)
Execution Failure : org.junit.runners.model.TestTimedOutException: test timed out after 25000 milliseconds
Execution Finished : performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput
Execution Started : performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput
Execution Failure : java.lang.AssertionError: 
Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@61b165e8>, <edu.yu.introtoalgs.MergeAnInterval$Interval@7f1ad532>, <edu.yu.introtoalgs.MergeAnInterval$Interval@386c7ee8>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@3be2bc5>
Execution Finished : performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput
Execution Started : intervalCanHaveNegativeLeftAndRigh
Execution Finished : intervalCanHaveNegativeLeftAndRigh
Execution Started : leftCantEqualRight
Execution Failure : java.lang.AssertionError: Expected exception: java.lang.IllegalArgumentException
Execution Finished : leftCantEqualRight
Execution Started : disjointIntervalsArentMerged
[INFO ] 2020-11-12 10:30:45.595 [main] ProfessorMergeAnIntervalTest disjointIntervalsArentMerged - merging edu.yu.introtoalgs.MergeAnInterval$Interval@30c93896 into [edu.yu.introtoalgs.MergeAnInterval$Interval@2421cc4]
[INFO ] 2020-11-12 10:30:45.596 [main] ProfessorMergeAnIntervalTest disjointIntervalsArentMerged - result of merge: [edu.yu.introtoalgs.MergeAnInterval$Interval@2421cc4, edu.yu.introtoalgs.MergeAnInterval$Interval@30c93896]
Execution Finished : disjointIntervalsArentMerged
[ERROR] Tests run: 8, Failures: 4, Errors: 1, Skipped: 0, Time elapsed: 25.333 s <<< FAILURE! - in edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest
[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.vanillaTest  Time elapsed: 0.018 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@3081f72c>, <edu.yu.introtoalgs.MergeAnInterval$Interval@436c81a3>, <edu.yu.introtoalgs.MergeAnInterval$Interval@3561c410>, <edu.yu.introtoalgs.MergeAnInterval$Interval@5a3bc7ed>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@43b9fd5>
	at edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.vanillaTest(ProfessorMergeAnIntervalTest.java:274)

[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.overlappingIntervalsAreMerged  Time elapsed: 0.001 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@327bcebd>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@65b104b9>
	at edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.overlappingIntervalsAreMerged(ProfessorMergeAnIntervalTest.java:252)

[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput  Time elapsed: 25.004 s  <<< ERROR!
org.junit.runners.model.TestTimedOutException: test timed out after 25000 milliseconds
	at app//edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput(ProfessorMergeAnIntervalTest.java:93)

[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput  Time elapsed: 0.007 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@61b165e8>, <edu.yu.introtoalgs.MergeAnInterval$Interval@7f1ad532>, <edu.yu.introtoalgs.MergeAnInterval$Interval@386c7ee8>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@3be2bc5>
	at edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput(ProfessorMergeAnIntervalTest.java:194)

[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.leftCantEqualRight  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: Expected exception: java.lang.IllegalArgumentException

Test cases executed : 8
[ERROR] Failures: 
[ERROR]   ProfessorMergeAnIntervalTest.leftCantEqualRight Expected exception: java.lang.IllegalArgumentException
[ERROR]   ProfessorMergeAnIntervalTest.overlappingIntervalsAreMerged:252 
Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@327bcebd>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@65b104b9>
[ERROR]   ProfessorMergeAnIntervalTest.performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput:194 
Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@61b165e8>, <edu.yu.introtoalgs.MergeAnInterval$Interval@7f1ad532>, <edu.yu.introtoalgs.MergeAnInterval$Interval@386c7ee8>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@3be2bc5>
[ERROR]   ProfessorMergeAnIntervalTest.vanillaTest:274 
Expected: iterable with items [<edu.yu.introtoalgs.MergeAnInterval$Interval@3081f72c>, <edu.yu.introtoalgs.MergeAnInterval$Interval@436c81a3>, <edu.yu.introtoalgs.MergeAnInterval$Interval@3561c410>, <edu.yu.introtoalgs.MergeAnInterval$Interval@5a3bc7ed>] in any order
     but: not matched: <edu.yu.introtoalgs.MergeAnInterval$Interval@43b9fd5>
[ERROR] Errors: 
[ERROR]   ProfessorMergeAnIntervalTest.performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput:93 » TestTimedOut
[ERROR] Tests run: 8, Failures: 4, Errors: 1, Skipped: 0
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M5:test (default-test) on project MergeAnInterval: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/avraham/YUGitRepos/2545/SoclofEthan/IntroToAlgorithms/assignments/MergeAnInterval/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
Problem invoking 'maven test target': aborting this run
Grade for assignment [SoclofEthan]: /10
Pulled files on Tue Nov 17 08:36:44 EST 2020
Latest commit of student files ....
Latest commit of src/main/java/edu/yu/introtoalgs/MergeAnInterval.java was on: Mon Nov 16 23:17:08 2020
======================================================
Checking the history of the implementation file
commit 677567be2a219ea4e76dd76b5e90c289c453932d
Author: Etan Soclof <soclof@mail.yu.edu>
Date:   Mon Nov 16 23:17:08 2020 -0500

    stuff

diff --git a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
index 3054ed9..c1da011 100644
--- a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
+++ b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
@@ -73,13 +73,10 @@ public class MergeAnInterval {
       if(this == obj){
         return true;
       }
-
       if(obj == null || obj.getClass()!= this.getClass()){
         return false;
       }
-
       Interval interval = (Interval) obj;
-
       return this.left == interval.left && this.right == interval.right;
     }
 

commit 3d546839896d7c9eeb1b47a8b27dc36952c036e9
Author: Etan Soclof <soclof@mail.yu.edu>
Date:   Mon Nov 16 19:01:38 2020 -0500

    Added standard overrides

diff --git a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
index 3eedbe2..3054ed9 100644
--- a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
+++ b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
@@ -4,7 +4,7 @@ import java.util.*;
 
 public class MergeAnInterval {
 
-
+/*
   public static void main(String[] args) {
     Interval i5 = new Interval(1, 2);
     Interval i1 = new Interval(3, 4);
@@ -22,6 +22,8 @@ public class MergeAnInterval {
     System.out.println();
   }
 
+ */
+
 
 
 
@@ -65,6 +67,31 @@ public class MergeAnInterval {
       }
       return -1;
     }
+
+    @Override
+    public boolean equals(Object obj){
+      if(this == obj){
+        return true;
+      }
+
+      if(obj == null || obj.getClass()!= this.getClass()){
+        return false;
+      }
+
+      Interval interval = (Interval) obj;
+
+      return this.left == interval.left && this.right == interval.right;
+    }
+
+    @Override
+    public int hashCode() {
+      return Objects.hash(this.left, this.right);
+    }
+
+    @Override
+    public String toString(){
+      return this.left + " - " + this.right;
+    }
   } // Interval class
 
   /** Merges the new interval into an existing set of disjoint intervals.

commit ac291b60b32ef4aec5ca7a54eac6d587fad8e00e
Author: Etan Soclof <soclof@mail.yu.edu>
Date:   Sun Nov 15 17:43:41 2020 -0500

    IntegerLRUCache v1

diff --git a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
index 4724b10..3eedbe2 100644
--- a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
+++ b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
@@ -4,16 +4,16 @@ import java.util.*;
 
 public class MergeAnInterval {
 
-/*
+
   public static void main(String[] args) {
+    Interval i5 = new Interval(1, 2);
     Interval i1 = new Interval(3, 4);
-    Interval i2 = new Interval(-34, -23);
     Interval i3 = new Interval(5, 6);
-    Interval i4 = new Interval(2, 100);
+    Interval i4 = new Interval(7, 8);
     Set<Interval> set = new HashSet<>();
     set.add(i1);
-    set.add(i2);
     set.add(i3);
+    set.add(i5);
     set = merge(set, i4);
     System.out.println("Test 1:");
     for (Interval i: set){
@@ -22,7 +22,7 @@ public class MergeAnInterval {
     System.out.println();
   }
 
- */
+
 
 
 

commit 8263420cfa0b3efdec3b6e5b35e2750677a1c16d
Author: Etan Soclof <soclof@mail.yu.edu>
Date:   Mon Nov 9 22:45:39 2020 -0500

    MergeAnInterval v2

diff --git a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
index 4696b52..4724b10 100644
--- a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
+++ b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
@@ -7,65 +7,26 @@ public class MergeAnInterval {
 /*
   public static void main(String[] args) {
     Interval i1 = new Interval(3, 4);
-    Interval i2 = new Interval(0, 2);
-    Interval i3 = new Interval(4, 5);
+    Interval i2 = new Interval(-34, -23);
+    Interval i3 = new Interval(5, 6);
+    Interval i4 = new Interval(2, 100);
     Set<Interval> set = new HashSet<>();
     set.add(i1);
     set.add(i2);
-    set = merge(set, i3);
-    System.out.println("Test 1:");
-    for (Interval i: set){
-      System.out.println(i.left + " - " + i.right);
-    }
-    System.out.println();
-
-    System.out.println("Test 2:");
-    Interval i4 = new Interval(2, 3);
-    set = merge(set, i4);
-    for (Interval i: set){
-      System.out.println(i.left + " - " + i.right);
-    }
-    System.out.println();
-
-    System.out.println("Test 3:");
-    set = merge(set, i4);
-    for (Interval i: set){
-      System.out.println(i.left + " - " + i.right);
-    }
-
-    System.out.println();
-
-    System.out.println("Test 4:");
-    set = new HashSet<>();
-    set = merge(set, i4);
-    for (Interval i: set){
-      System.out.println(i.left + " - " + i.right);
-    }
-
-    System.out.println();
-
-    System.out.println("Test 5:");
     set.add(i3);
-    set = merge(set, i1);
+    set = merge(set, i4);
+    System.out.println("Test 1:");
     for (Interval i: set){
       System.out.println(i.left + " - " + i.right);
     }
-
     System.out.println();
-
-    System.out.println("Test IAE:");
-    Interval i5 = new Interval(0, 5);
-    set = merge(set, i5);
-    for (Interval i: set){
-      System.out.println(i.left + " - " + i.right);
-    }
-
   }
 
  */
 
 
 
+
   /** An immutable class, holds a left and right integer-valued pair that
    * defines a closed interval
    */
@@ -135,6 +96,9 @@ public class MergeAnInterval {
     ArrayList<Interval> auxList = new ArrayList<Interval>();
     Collections.sort(list);
     auxList.add(list.get(0));
+    if (list.get(0).right < list.get(0).left){
+      throw new IllegalArgumentException("Invalid Input: left is larger than right");
+    }
     for (int i = 1; i < list.size(); i++) {
       Interval second = list.get(i);
       if (second.right < second.left){

commit e92e86f660e99a4c98d2ec0c900854c48fa1514c
Author: Etan Soclof <soclof@mail.yu.edu>
Date:   Sun Nov 8 19:46:51 2020 -0500

    MergeAnInterval v1

diff --git a/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
new file mode 100644
index 0000000..4696b52
--- /dev/null
+++ b/IntroToAlgorithms/assignments/MergeAnInterval/src/main/java/edu/yu/introtoalgs/MergeAnInterval.java
@@ -0,0 +1,168 @@
+package edu.yu.introtoalgs;
+
+import java.util.*;
+
+public class MergeAnInterval {
+
+/*
+  public static void main(String[] args) {
+    Interval i1 = new Interval(3, 4);
+    Interval i2 = new Interval(0, 2);
+    Interval i3 = new Interval(4, 5);
+    Set<Interval> set = new HashSet<>();
+    set.add(i1);
+    set.add(i2);
+    set = merge(set, i3);
+    System.out.println("Test 1:");
+    for (Interval i: set){
+      System.out.println(i.left + " - " + i.right);
+    }
+    System.out.println();
+
+    System.out.println("Test 2:");
+    Interval i4 = new Interval(2, 3);
+    set = merge(set, i4);
+    for (Interval i: set){
+      System.out.println(i.left + " - " + i.right);
+    }
+    System.out.println();
+
+    System.out.println("Test 3:");
+    set = merge(set, i4);
+    for (Interval i: set){
+      System.out.println(i.left + " - " + i.right);
+    }
+
+    System.out.println();
+
+    System.out.println("Test 4:");
+    set = new HashSet<>();
+    set = merge(set, i4);
+    for (Interval i: set){
+      System.out.println(i.left + " - " + i.right);
+    }
+
+    System.out.println();
+
+    System.out.println("Test 5:");
+    set.add(i3);
+    set = merge(set, i1);
+    for (Interval i: set){
+      System.out.println(i.left + " - " + i.right);
+    }
+
+    System.out.println();
+
+    System.out.println("Test IAE:");
+    Interval i5 = new Interval(0, 5);
+    set = merge(set, i5);
+    for (Interval i: set){
+      System.out.println(i.left + " - " + i.right);
+    }
+
+  }
+
+ */
+
+
+
+  /** An immutable class, holds a left and right integer-valued pair that
+   * defines a closed interval
+   */
+  public static class Interval implements Comparable<Interval>{
+    /** Constructor
+     *
+     * @param left the left endpoint of the interval
+     * @param right the right endpoint of the interval
+     */
+    public final int left;
+    public final int right;
+
+    public Interval(int l, int r) {
+      this.left = l;
+      this.right = r;
+    }
+
+    public int getLeft() {
+      return this.left;
+    }
+
+    public int getRight() {
+      return this.right;
+    }
+
+    @Override
+    public int compareTo(Interval o) {
+      if (this.left < o.left){
+        return -1;
+      }
+      if (this.left > o.left){
+        return 1;
+      }
+      if (this.left == o.left){
+        return 0;
+      }
+      return -1;
+    }
+  } // Interval class
+
+  /** Merges the new interval into an existing set of disjoint intervals.
+   *
+   * @param intervals the existing set of intervals
+   * @param newInterval the interval to be added
+   * @return a new set of disjoint intervals containing the original intervals
+   * and the new interval, merging the new interval if necessary into existing
+   * interval(s), to preseve the "disjointedness" property.
+   */
+  public static Set<Interval> merge(final Set<Interval> intervals, Interval newInterval){
+
+    //Check for invalid input
+    if (intervals == null || newInterval == null){
+      throw new IllegalArgumentException("Null input");
+    }
+    if (newInterval.right < newInterval.left){
+      throw new IllegalArgumentException("Invalid Input: left is larger than right");
+    }
+
+    //If intervals is size=0
+    if (intervals.size() == 0){
+      intervals.add(newInterval);
+      return intervals;
+    }
+
+    intervals.add(newInterval);
+    ArrayList<Interval> list = new ArrayList<Interval>(intervals);
+    ArrayList<Interval> auxList = new ArrayList<Interval>();
+    Collections.sort(list);
+    auxList.add(list.get(0));
+    for (int i = 1; i < list.size(); i++) {
+      Interval second = list.get(i);
+      if (second.right < second.left){
+        throw new IllegalArgumentException("Invalid Input: left is larger than right");
+      }
+      Interval first = auxList.get(auxList.size() - 1);
+      if (second.left <= first.right) {
+        Interval aux = null;
+        if (second.right >= first.right){
+          aux = new Interval(first.left, second.right);
+        }
+        else {
+          aux = new Interval(first.left, first.right);
+        }
+        auxList.remove(auxList.size() - 1);
+        auxList.add(aux);
+      }
+      else{
+        auxList.add(second);
+      }
+    }
+
+    Set<Interval> set = new HashSet<>();
+    // Add each element of list into the set
+    for (Interval i : auxList)
+      set.add(i);
+
+    // return the set
+    return set;
+  }
+}
======================================================
building Student SoclofEthan assignment code base from directory /Users/avraham/YUGitRepos/2545/SoclofEthan/IntroToAlgorithms/assignments/MergeAnInterval
Picked up JAVA_TOOL_OPTIONS: -Xms4096m -Xmx15G -XX:MaxMetaspaceSize=1G
Copying Professor's JUnit source files in /Users/avraham/YUTeaching/IntroToAlgorithms/assignments/MergeAnInterval/src/test to Student SoclofEthan directory tree in /Users/avraham/YUGitRepos/2545/SoclofEthan/IntroToAlgorithms/assignments/MergeAnInterval/src
executing Professor's test code against Student SoclofEthan code
Picked up JAVA_TOOL_OPTIONS: -Xms4096m -Xmx15G -XX:MaxMetaspaceSize=1G
[ERROR] Picked up JAVA_TOOL_OPTIONS: -Xms4096m -Xmx15G -XX:MaxMetaspaceSize=1G
Test cases to execute : 1
Execution Started : vanillaTest
[INFO ] 2020-11-17 08:36:49.249 [main] ProfessorMergeAnIntervalTest vanillaTest - merging 1 - 8 into [11 - 12, 0 - 2, 7 - 9, -4 - -1, 3 - 6, 14 - 17]
[INFO ] 2020-11-17 08:36:49.252 [main] ProfessorMergeAnIntervalTest vanillaTest - result of merge: [11 - 12, -4 - -1, 14 - 17, 0 - 9]
Execution Finished : vanillaTest
Execution Started : okForRightToOnlyBeGreaterThanLeftByOne
Execution Finished : okForRightToOnlyBeGreaterThanLeftByOne
Execution Started : overlappingIntervalsAreMerged
[INFO ] 2020-11-17 08:36:49.257 [main] ProfessorMergeAnIntervalTest overlappingIntervalsAreMerged - merging 0 - 2 into [1 - 4]
[INFO ] 2020-11-17 08:36:49.258 [main] ProfessorMergeAnIntervalTest overlappingIntervalsAreMerged - result of merge: [0 - 4]
Execution Finished : overlappingIntervalsAreMerged
Execution Started : performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput
[DEBUG] 2020-11-17 08:36:49.312 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=2048) = 2.0 (current = 2.0, previous = 1.0)
[DEBUG] 2020-11-17 08:36:49.320 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=4096) = 1.0 (current = 2.0, previous = 2.0)
[DEBUG] 2020-11-17 08:36:49.337 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=8192) = 2.0 (current = 4.0, previous = 2.0)
[DEBUG] 2020-11-17 08:36:49.390 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=16384) = 2.0 (current = 8.0, previous = 4.0)
[DEBUG] 2020-11-17 08:36:49.565 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=32768) = 1.75 (current = 14.0, previous = 8.0)
[DEBUG] 2020-11-17 08:36:50.192 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=65536) = 1.7142857142857142 (current = 24.0, previous = 14.0)
[DEBUG] 2020-11-17 08:36:52.585 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=131072) = 2.0416666666666665 (current = 49.0, previous = 24.0)
[DEBUG] 2020-11-17 08:37:02.032 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=262144) = 2.020408163265306 (current = 99.0, previous = 49.0)
Execution Failure : org.junit.runners.model.TestTimedOutException: test timed out after 25000 milliseconds
Execution Finished : performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput
Execution Started : performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput
[DEBUG] 2020-11-17 08:37:14.315 [Time-limited test] ProfessorMergeAnIntervalTest performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput - Doubling-ratio experiment: ratio (n=16384) = 29.0 (current = 29.0, previous = 1.0)
Execution Failure : java.lang.AssertionError: Performance should be O(n log n), but for n=16384 observed doubling ratio of 29.0
Execution Finished : performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput
Execution Started : intervalCanHaveNegativeLeftAndRigh
Execution Finished : intervalCanHaveNegativeLeftAndRigh
Execution Started : leftCantEqualRight
Execution Failure : java.lang.AssertionError: Expected exception: java.lang.IllegalArgumentException
Execution Finished : leftCantEqualRight
Execution Started : disjointIntervalsArentMerged
[INFO ] 2020-11-17 08:37:14.326 [main] ProfessorMergeAnIntervalTest disjointIntervalsArentMerged - merging 0 - 2 into [3 - 4]
[INFO ] 2020-11-17 08:37:14.326 [main] ProfessorMergeAnIntervalTest disjointIntervalsArentMerged - result of merge: [3 - 4, 0 - 2]
Execution Finished : disjointIntervalsArentMerged
[ERROR] Tests run: 8, Failures: 2, Errors: 1, Skipped: 0, Time elapsed: 25.365 s <<< FAILURE! - in edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest
[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput  Time elapsed: 25.014 s  <<< ERROR!
org.junit.runners.model.TestTimedOutException: test timed out after 25000 milliseconds
	at app//edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput(ProfessorMergeAnIntervalTest.java:93)

[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput  Time elapsed: 0.052 s  <<< FAILURE!
java.lang.AssertionError: Performance should be O(n log n), but for n=16384 observed doubling ratio of 29.0
	at edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput(ProfessorMergeAnIntervalTest.java:206)

[ERROR] edu.yu.introtoalgs.test.ProfessorMergeAnIntervalTest.leftCantEqualRight  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: Expected exception: java.lang.IllegalArgumentException

Test cases executed : 8
[ERROR] Failures: 
[ERROR]   ProfessorMergeAnIntervalTest.leftCantEqualRight Expected exception: java.lang.IllegalArgumentException
[ERROR]   ProfessorMergeAnIntervalTest.performanceIsOrderNLogNNonDisjointIntervalsEvenForLargeRangeInInput:206 Performance should be O(n log n), but for n=16384 observed doubling ratio of 29.0
[ERROR] Errors: 
[ERROR]   ProfessorMergeAnIntervalTest.performanceIsOrderNLogNDisjointIntervalsEvenForLargeRangeInInput:93 » TestTimedOut
[ERROR] Tests run: 8, Failures: 2, Errors: 1, Skipped: 0
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M5:test (default-test) on project MergeAnInterval: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/avraham/YUGitRepos/2545/SoclofEthan/IntroToAlgorithms/assignments/MergeAnInterval/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
Problem invoking 'maven test target': aborting this run
